#!/usr/bin/env ruby
require 'gli'
require 'suploy-scli'

#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/suploy-scli` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/suploy-scli now"
#  exit 64
#end

include GLI::App

program_desc 'A commandlineinterface for managing a suploy server'

version SuployScli::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'manage ssh-keys'
arg_name 'Describe arguments to list here'
command :ssh do |c|
  c.desc 'Describe a switch to list'
  c.switch :s

  c.desc 'Describe a flag to list'
  c.default_value 'default'
  c.flag :f


  c.desc "adds a ssh-key to a user"
  arg_name 'Describe arguments to list here'
  c.command :add do |add| 
    add.action do |global_options,options,args|
      if args.size == 3
         @scli.add_ssh_key(args[0], args[1], args[3])
      end
    end
  end


  c.desc "removes a ssh-key from a user"
  c.command :rm do |rm| 
    rm.action do |global_options,options,args|
      if args.size == 2
         @scli.remove_ssh_key(args[0], args[1])
      end
    end
  end

end

desc 'manage repositoryis'
arg_name 'Describe arguments to add here'
command :repo do |c|


  c.desc "adds a repository to suploy"
  c.command :add do |add| 
    add.action do |global_options,options,args|
      if args.size == 2
         @scli.add_repository(args[0], args[1])
      end
    end
  end

  c.desc "removes a repository from suploy"
  c.command :rm do |rm| 
    rm.action do |global_options,options,args|
      if args.size == 2
         @scli.remove_repository(args[0])
      end
    end
  end

end

desc 'manage suploy container'
arg_name 'Describe arguments to complete here'
command :container do |c|

  c.desc ""
  c.command :start do |start| 
    start.action do |global_options,options,args|
      if args.size == 1
         @scli.start_container(args[0])
      end
    end
  end
  

  c.desc "stop a running container"
  c.command :stop do |stop| 
    stop.action do |global_options,options,args|
      if args.size == 1
         @scli.stop_container(args[0])
      end
    end
  end

  c.desc "Views information about a container"
  c.command :view do |view| 
    view.action do |global_options,options,args|
      if args.size == 1
         @scli.view_container(args[0])
      end
    end
  end
end

desc 'Handle docker database containers'
command :database do |c|
  c.desc 'create a new database container'
  c.command :create do |create|
    create.action do |global_options,options,args|
      puts "Creating a database just for you. Hang on a second..."
      puts Scli.database_create
    end
  end
  c.desc 'show all database containers'
  c.command :list do |list|
    list.action do |global_options,options,args|
      puts "list all containers here"
    end
  end
end

pre do |global,command,options,args|
  @scli = Scli.new('/home/vagrant/gitolite-admin', '/home/git/repositories')

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
