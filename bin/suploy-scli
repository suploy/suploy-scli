#!/usr/bin/env ruby
require 'gli'
require 'suploy-scli'

#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/suploy-scli` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/suploy-scli now"
#  exit 64
#end

include GLI::App

program_desc 'A commandlineinterface for managing a suploy server'

version SuployScli::VERSION

desc 'Manage SSH Keys'
command :ssh do |c|

  c.desc "Add a SSH Key to a user"
  c.arg_name '<username> <sshkey_name> <sshkey>'
  c.command :add do |add| 
    add.action do |global_options,options, args|
      if args.size == 3
        user        = args[0]
        sshkey_name = args[1]
        sshkey      = args[2]
        if @ssh_keys.add_ssh_key(user, sshkey_name, sshkey)
          puts "SSH-Key #{sshkey_name} added for #{user}"
        else 
          raise_error "Cannot add SSH-Key"
        end
      else
        raise_arg_not_match
      end
    end
  end


  c.desc "Remove a SSH Key from a user"
  c.arg_name '<username> <sshkey_name>'
  c.command :rm do |rm| 
    rm.action do |global_options,options,args|
      if args.size == 2
        user        = args[0]
        sshkey_name = args[1]
        if @ssh_keys.remove_ssh_key(user, sshkey_name)
          puts "SSH-Key #{sshkey_name} removed for #{user}"
        end
      else 
        raise_arg_not_match
      end
    end
  end

end

desc 'Manage repositories'
command :repo do |c|


  c.desc "Add a repository to suploy"
  c.arg_name '<username> <repository_name>'
  c.command :add do |add| 
    add.action do |global_options,options,args|
      if args.size == 2
        user = args[0]
        repo = args[1]
        @repo.add_repository(user, repo)
      else 
        raise_arg_not_match
      end
    end
  end

  c.desc "Remove a repository from suploy"
  c.arg_name '<username> <repository_name>'
  c.command :rm do |rm| 
    rm.action do |global_options,options,args|
      if args.size == 1
        repo = args[0]
        @repo.remove_repository(repo)
      else 
        raise_arg_not_match
      end
    end
  end

  c.desc "Manage user of a repository"
  c.command :user do |user| 
    user.desc "Add a user to a repository"
    user.arg_name '<repository_name> <username>'
    user.command :add do |add|
      add.action do |global_options,options,args|
        if args.size == 2
          repo = args[0]
          user = args[1]
          @repo.add_user_to_repository(repo, user)
        else 
          raise_arg_not_match
        end
      end
    end

    user.desc "Remove a user to a repository"
    user.arg_name '<repository_name> <username>'
    user.command :rm do |rm|
      rm.action do |global_options,options,args|
        if args.size == 2
          repo = args[0]
          user = args[1]
          @repo.remove_user_from_repository(repo, user)
        else 
          raise_arg_not_match
        end
      end
    end
  end

end

desc 'Manage suploy container'
command :container do |c|

  c.desc "Create a container from an image"
  c.arg_name '<image_name>'
  c.command :create do |create| 
    create.action do |global_options,options,args|
      if args.size == 1
        image = args[0]
        Scli::Container.create_app_container(image, '')
      else 
        raise_arg_not_match
      end
    end
  end


  c.desc "Create a container from an image with a database"
  c.arg_name '<image_name> <db_container_name>'
  c.command :link do |link| 
    link.action do |global_options,options,args|
      if args.size == 2
        image = args[0]
				link = args[1]
        Scli::Container.create_app_container_with_db(image, "", link)
      else 
        raise_arg_not_match
      end
    end
  end


  c.desc "Start a container of a repository"
  c.arg_name '<repository_name>'
  c.command :start do |start| 
    start.action do |global_options,options,args|
      if args.size == 1
        repo = args[0]
        Scli::Container.start_container(repo)
      else 
        raise_arg_not_match
      end
    end
  end


  c.desc "Stop a running container of a repository"
  c.arg_name '<repository_name>'
  c.command :stop do |stop| 
    stop.action do |global_options,options,args|
      if args.size == 1
        repo = args[0]
        Scli::Container.stop_container(repo)
      else 
        raise_arg_not_match
      end
    end
  end

  c.desc "Views information about a container"
  c.arg_name '<repository_name>'
  c.command :view do |view| 

    view.desc "Views information about all container"
    view.command :all do |all|
      all.action do |global_options,options,args|
        ugly_json = @container.view_all_container()
        puts JSON::pretty_generate(ugly_json)
      end
    end
    
    view.action do |global_options,options,args|
      if args.size == 1
        repo = args[0]
        ugly_json = @container.view_container(repo)
        puts JSON::pretty_generate(ugly_json)
      else 
        raise_arg_not_match
      end
    end
  end

end

desc 'Handle docker database containers'
command :database do |c|
  c.desc 'create a new database container'
  c.command :create do |create|
    create.action do |global_options,options,args|
      puts "Creating a database just for you. Hang on a second..."
      puts Scli::Database.database_create
    end
  end
  c.desc 'show all database containers'
  c.command :list do |list|
    list.action do |global_options,options,args|
      puts "list all containers here"
    end
  end
end

pre do |global,command,options,args|
  gitolite_dir = '/home/vagrant/gitolite-admin'
  git_repo_dir = '/home/git/repositories'
  #@ssh_keys = Scli::ScliSSHKey.new(gitolite_dir)
  #@repo = Scli::Repo.new(gitolite_dir, git_repo_dir)
  @database = Scli::Database.new

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

def raise_error (msg) 
  STDERR.puts "ERROR: #{msg}" 
end

def raise_arg_not_match
  raise_error "Wrong number of arguments"
end

exit run(ARGV)
